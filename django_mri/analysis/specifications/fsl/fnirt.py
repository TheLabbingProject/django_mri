from django_analysis.models.input.definitions import (
    BooleanInputDefinition,
    FileInputDefinition,
    FloatInputDefinition,
    IntegerInputDefinition,
    ListInputDefinition,
    StringInputDefinition,
)

from django_analysis.models.output.definitions import FileOutputDefinition

FNIRT_INPUT_SPECIFICATION = {
    "in_file": {
        "type": FileInputDefinition,
        "required": True,
        "description": "A NIfTI format file to register to the reference.",
        "is_configuration": False,
    },
    "ref_file": {
        "type": FileInputDefinition,
        "required": True,
        "description": "A NIfTI format file to register the input file with.",
    },
    "affine_file": {
        "type": FileInputDefinition,
        "description": "File containing an existing affine transformation matrix.",
    },
    "inwarp_file": {
        "type": FileInputDefinition,
        "description": "File containing initial non-linear warps.",
    },
    "in_intensitymap_file": {
        "type": FileInputDefinition,
        "description": "File containing initial initial intensity mapping usually generated by a previous FNIRT run.",
    },
    "fieldcoeff_file": {
        "type": StringInputDefinition,
        "description": "Name for field coefficients file to output.",
        "is_output_path": True,
        "default": "field_coefficients.txt",
    },
    "warped_file": {
        "type": StringInputDefinition,
        "description": "Path for the output image.",
        "is_output_path": True,
    },
    "field_file": {
        "type": StringInputDefinition,
        "description": "Path for the output file with field.",
        "is_output_path": True,
    },
    "jacobian_file": {
        "type": StringInputDefinition,
        "description": "Path to the output file for writing out the Jacobian of the field (for diagnostic or VBM purposes).",
        "is_output_path": True,
    },
    "modulatedref_file": {
        "type": StringInputDefinition,
        "description": "Path to the output file for writing out intensity modulated --ref (for diagnostic purposes).",
        "is_output_path": True,
    },
    "out_intensitymap_file": {
        "type": StringInputDefinition,
        "description": "Path to the output file for writing information pertaining to intensity mapping.",
        "is_output_path": True,
    },
    "log_file": {
        "type": StringInputDefinition,
        "description": "Path for a log file.",
        "is_output_path": True,
        "default": "log.txt",
    },
    "config_file": {
        "type": StringInputDefinition,
        "description": "Path for a config file specifying command line arguments.",
        "is_output_path": True,
        "default": "config.txt",
    },
    "refmask_file": {
        "type": FileInputDefinition,
        "description": "Path for a file with a mask in the reference space.",
    },
    "inmask_file": {
        "type": FileInputDefinition,
        "description": "Path for a file with a mask in the input image space.",
    },
    "skip_refmask": {
        "type": BooleanInputDefinition,
        "description": "Skip specified refmask_file if set.",
    },
    "skip_inmask": {
        "type": BooleanInputDefinition,
        "description": "Skip specified inmask_file if set.",
    },
    "apply_refmask": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "A list of iterations to use the reference mask on (1 to use, 0 to skip).",
    },
    "apply_inmask": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "A list of iterations to use the input mask on (1 to use, 0 to skip).",
    },
    "skip_implicit_ref_masking": {
        "type": BooleanInputDefinition,
        "description": "Skip implicit masking based on value in reference image.",
    },
    "skip_implicit_in_masking": {
        "type": BooleanInputDefinition,
        "description": "Skip implicit masking based on value in input image.",
    },
    "refmask_val": {
        "type": FloatInputDefinition,
        "description": "Value to mask out in reference image.",
        "default": 0,
    },
    "inmask_val": {
        "type": FloatInputDefinition,
        "description": "Value to mask out in input image.",
        "default": 0,
    },
    "max_nonlin_iter": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "List containing the maximal numbers of non-linear iterations.",
        "default": [5, 5, 5, 5, 5],
    },
    "subsampling_scheme": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "Sub-sampling scheme.",
        "default": [4, 2, 1, 1],
    },
    "warp_resolution": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "Approximate resolution (in mm) of warp basis in the X, Y, and Z axes.",
        "default": [10, 10, 10],
        "min_length": 3,
        "max_length": 3,
    },
    "spline_order": {
        "type": IntegerInputDefinition,
        "description": "Order of spline (2 = quadratic, 3 = cubic).",
        "default": 3,
    },
    "in_fwhm": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "FWHM (in mm) of gaussian smoothing kernel for the input volume.",
        "default": [6, 4, 2, 2],
    },
    "ref_fwhm": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "FWHM (in mm) of gaussian smoothing kernel for the reference volume.",
        "default": [4, 2, 0, 0],
    },
    "regularization_model": {
        "type": StringInputDefinition,
        "description": "Model for regularisation of warp-field.",
        "choices": ["membrane_energy", "bending_energy"],
        "default": "bending_energy",
    },
    "regularization_lambda": {
        "type": ListInputDefinition,
        "element_type": "FLT",
        "description": "Weight of regularisation.",
    },
    "skip_lambda_ssq": {
        "type": BooleanInputDefinition,
        "description": "If true, lambda is not weighted by current ssq.",
        "default": False,
    },
    "jacobian_range": {
        "type": ListInputDefinition,
        "element_type": "FLT",
        "description": "Allowed range of Jacobian determinants.",
        "default": [0.01, 100.0],
    },
    "derive_from_ref": {
        "type": BooleanInputDefinition,
        "description": "If true, reference image is used to calculate derivatives.",
        "default": False,
    },
    "intensity_mapping_model": {
        "type": StringInputDefinition,
        "description": "Model for intensity-mapping.",
        "choices": [
            "none",
            "global_linear",
            "global_non_linear",
            "local_linear",
            "global_non_linear_with_bias",
            "local_non_linear",
        ],
    },
    "intensity_mapping_order": {
        "type": IntegerInputDefinition,
        "description": "Order of poynomial for mapping intensities.",
        "default": 5,
    },
    "biasfield_resolution": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "Approximate resolution (in mm) of warp basis in the X, Y, and Z axes.",
        "default": [50, 50, 50],
        "min_length": 3,
        "max_length": 3,
    },
    "bias_regularization_lambda": {
        "type": FloatInputDefinition,
        "description": "Weight of regularisation for bias-field.",
        "default": 10000,
    },
    "skip_intensity_mapping": {
        "type": BooleanInputDefinition,
        "description": "Whether to skip estimate intensity-mapping.",
        "default": False,
    },
    "apply_intensity_mapping": {
        "type": ListInputDefinition,
        "element_type": "INT",
        "description": "List of subsampling levels to apply intensity mapping for (0 to skip, 1 to apply).",
    },
    "hessian_precision": {
        "type": StringInputDefinition,
        "description": "Precision for representing Hessian.",
        "choices": ["double", "float"],
        "default": "double",
    },
    "output_type": {
        "type": StringInputDefinition,
        "description": "Output file format.",
        "choices": ["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"],
    },
}

FNIRT_OUTPUT_SPECIFICATION = {
    "fieldcoeff_file": {
        "type": FileOutputDefinition,
        "description": "Field coefficients.",
    },
    "warped_file": {"type": FileOutputDefinition, "description": "Warped image."},
    "field_file": {"type": FileOutputDefinition, "description": "Warp field."},
    "jacobian_file": {
        "type": FileOutputDefinition,
        "description": "Jacobian of the field.",
    },
    "modulatedref_file": {
        "type": FileOutputDefinition,
        "description": "Intensity modulated reference.",
    },
    "out_intensitymap_file": {
        "type": FileOutputDefinition,
        "description": "Intensity mapping information.",
    },
    "log_file": {"type": FileOutputDefinition, "description": "Run log."},
}
